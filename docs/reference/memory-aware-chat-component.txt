// src/components/ai/MemoryAwareChat.tsx
import React, { useEffect, useRef } from 'react';
import { Send, Brain, Sparkles, X, ChevronDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useMemoryAwareAIChat } from '@/hooks/useMemoryAwareAIChat';
import { AIModel } from '@/services/aiModels';
import { cn } from '@/lib/utils';

export function MemoryAwareChat() {
  const {
    messages,
    isLoading,
    selectedModel,
    availableModels,
    isLoadingModels,
    sendMessage,
    changeModel,
    clearConversation,
    refreshModels
  } = useMemoryAwareAIChat();

  const [inputValue, setInputValue] = React.useState('');
  const [showMemoryContext, setShowMemoryContext] = React.useState<string | null>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  // Load models on mount
  useEffect(() => {
    refreshModels();
  }, [refreshModels]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputValue.trim() && !isLoading) {
      sendMessage(inputValue);
      setInputValue('');
    }
  };

  return (
    <Card className="w-full h-full flex flex-col">
      {/* Header */}
      <div className="border-b p-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Brain className="w-5 h-5 text-primary" />
          <h2 className="font-semibold">Memory-Aware AI Chat</h2>
        </div>
        <div className="flex items-center gap-2">
          <Select
            value={selectedModel}
            onValueChange={(value) => changeModel(value as AIModel)}
            disabled={isLoadingModels}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select AI Model" />
            </SelectTrigger>
            <SelectContent>
              {availableModels.map((model) => (
                <SelectItem 
                  key={model.id} 
                  value={model.id}
                  disabled={!model.isAvailable}
                >
                  <div className="flex items-center gap-2">
                    <span>{model.name}</span>
                    {!model.isAvailable && (
                      <Badge variant="secondary" className="text-xs">
                        API Key Required
                      </Badge>
                    )}
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button
            variant="ghost"
            size="sm"
            onClick={clearConversation}
            title="Clear conversation"
          >
            Clear
          </Button>
        </div>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={cn(
                "flex",
                message.role === 'user' ? 'justify-end' : 'justify-start'
              )}
            >
              <div
                className={cn(
                  "max-w-[80%] rounded-lg p-3",
                  message.role === 'user'
                    ? 'bg-primary text-primary-foreground ml-4'
                    : 'bg-muted mr-4'
                )}
              >
                {/* Memory Context Indicator */}
                {message.memoryContext && message.memoryContext.length > 0 && (
                  <div className="mb-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-6 px-2 text-xs"
                      onClick={() => setShowMemoryContext(
                        showMemoryContext === message.id ? null : message.id
                      )}
                    >
                      <Sparkles className="w-3 h-3 mr-1" />
                      {message.memoryContext.length} memories used
                      <ChevronDown className={cn(
                        "w-3 h-3 ml-1 transition-transform",
                        showMemoryContext === message.id && "rotate-180"
                      )} />
                    </Button>
                    
                    {showMemoryContext === message.id && (
                      <div className="mt-2 space-y-1">
                        {message.memoryContext.map((memory) => (
                          <div
                            key={memory.id}
                            className="text-xs bg-background/50 rounded p-2 border"
                          >
                            <div className="flex items-center justify-between mb-1">
                              <span className="font-medium">{memory.title}</span>
                              <Badge variant="outline" className="text-xs">
                                {Math.round(memory.similarity * 100)}% match
                              </Badge>
                            </div>
                            <p className="text-muted-foreground line-clamp-2">
                              {memory.content}
                            </p>
                            {memory.topic_name && (
                              <Badge variant="secondary" className="mt-1 text-xs">
                                {memory.topic_name}
                              </Badge>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}
                
                {/* Message Content */}
                <div className="whitespace-pre-wrap">{message.content}</div>
                
                {/* Timestamp */}
                <div className="text-xs opacity-50 mt-1">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </div>
              </div>
            </div>
          ))}
          
          {/* Loading Indicator */}
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-muted rounded-lg p-3 mr-4">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce delay-100" />
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce delay-200" />
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input */}
      <form onSubmit={handleSubmit} className="border-t p-4">
        <div className="flex gap-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Ask anything... Your memories will provide context"
            disabled={isLoading}
            className="flex-1"
          />
          <Button type="submit" disabled={isLoading || !inputValue.trim()}>
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </form>
    </Card>
  );
}